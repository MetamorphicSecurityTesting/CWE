/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import sun.security.util.Password

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * XSS: The software does not neutralize or incorrectly neutralizes user-controllable input 
 * before it is placed in output that is used as a web page that is served to other users.
 * 
 * Idea:
 * for all actions we inject the URL of the action with XSS strings to verify that 
 * is there any vulnerable URL in the system or not. The system should show an error page
 * or a different output after injecting the URL.
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1).
 * (3) The second loop iterates over all parameters of the action.
 * (4) Defines a variable to store the position of the Input(1)'s action.
 * (5) Checks if the parameter of the action URL has not seen before, to speed up the process.
 * (6) Verifies that the action does not originally contain any alert.
 * (7) Creates the follow-up input by copying the Input(1).
 * (8) Sets the injected XSS string as the parameter value of the follow-up input.
 * (9) Checks either the attack was not performed or no effect shall be observed (the effect of the XSS is usually visualized when reaching the page where we inject the XSS)
 *  
 * 
 * 
 */
  MR CWE_79_a_XSSreflected { 
  { 	
 	
 	keepDialogsOpen = true;                                                                 //(1)
 	
    for ( Action action : Input(1).actions() ) {                                            //(2)
	    for ( var x =0; x < action.parameters.size; x++){                                   //(3)
  			
  			var pos = action.getPosition();                                                 //(4)
			
			IMPLIES(
				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() )  &&   //(5)
				! Output(Input(1), pos).hasAlert   &&	 				                    //(6)	 
				CREATE( Input(2), Input(1) ) &&					                            //(7)
			  	Input(2).actions().get(pos).setParameterValue(x,XSSInjectionString())       //(8)
			    ,
			    OR(                                                                         //(9)
		    	    Output(Input(2), pos).emptyFile,       
		    	   ! Output(Input(2), pos).hasAlert  ) 
		);//end-IMPLIES
	 }//end-for parameter
    }//end-for action
   }
  }//end-MR
 }//end-package





