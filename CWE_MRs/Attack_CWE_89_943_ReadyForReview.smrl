import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE_definition:
 * 
 * The software constructs all or part of an SQL command using externally-influenced input 
 * from an upstream component, but it does not neutralize or incorrectly neutralizes special
 * elements that could modify the intended SQL command when it is sent to a downstream component. 
 * 
 * Idea:
 * For all parameters of the actions we try to inject some SQLinjection phrases to check whether the system is vulnerable to SQL injection or not.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Stores the parameters of the current action in a variable.
 * (3) Second for loop iterates over all parameters of the current action
 * (4) Verifies that the current url has not been seen before
 * (5) Creates the follow-up input
 * (6) Sets the SQL injection strings to the parameter of the action 
 * (7) Checks that the result of the follow-up input is error
 *     Or the follow-up input can has the right to access 
 * 
 */ 
MR CWE_89 {
 {
 	
 	//FABRIZIO: please fix it by looking at 95 with a generator for SQLI 
 	

 	for (Action action : Input(1).actions()){              //(1)
 		var pos = action.getPosition();                    //(2) 
 		
 		for (var x = 0; x < action.parameters.size; x++){  //(3)
 		
 			IMPLIES(
 		
 				notTried( action.user, Input(1).actions().get(pos).getUrl() ) &&
 				EQUAL(Input(2), Input(1))&&                //(4)
 				Input(2).actions().get(pos).setParameterValue( x, SQLInjectionString() ) //(5)
 			                  
 				,
 				
 				OR(
		    		 isError(Output(Input(2), pos)),        //(7)                  
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))        
		    	)
 			);
 		}
 	}
 	
  } }
 }