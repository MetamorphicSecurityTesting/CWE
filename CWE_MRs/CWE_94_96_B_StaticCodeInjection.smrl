/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import  smrl.mr.language.actions.StandardAction;
import jdk.internal.util.xml.impl.Input

package smrl.mr.owasp{
 
/**
 * 
 * CWE Definition:
 * CWE_94: The software constructs all or part of a code segment using externally-influenced input 
 * from an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify the syntax or behavior of the intended code segment.
 * 
 * CWE_96 (child of CWE_94): The software receives input from an upstream component, but it does not 
 * neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, 
 * such as a library, configuration file, or template.
 * 
 * This issue is most frequently found in PHP applications that allow users to set configuration variables 
 * that are stored within executable PHP files.
 * 
 * Idea:
 * While the programmer intends for the input sections i.e. messages; to only include data, an attacker can provide a message such as:
 *                         message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E
 * That can be decoded to 
 *                         <?php system("/bin/ls -l");?>
 * Then in this MR we are trying to inject some malformed strings(like the above) to the all input entries.
 * The system should not allow to complete the task by showing an error page or showing the content that the user
 * has right to access it.
 * 
 * 
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterate over all actions of the Input(1)
 * (3) Define a variable to store the position of the Input(1)'s action
 * (4) The second loop iterates over all parameters of the action if the action contains a form input.
 * (5) makes sure the user will submit the form.
 * (6) Verifies the current parameter was not tested before.
 * (7) Filters out the web pages with dynamic content.
 * (8) Creates the follow-up input by copying the Input(1).
 * (9) Injects some Static injection strings to the follow-up input.
 * (10) The system may show an error page to the user 
 *     Or the user is retrieving the content that has right to access it.
 *  
 */
 
  
  MR CWE_94_96_B {
  {
	keepDialogsOpen = true;                                                                    //(1)
 	for (Action action : Input(1).actions()){                                                  //(2)
 		var pos = action.getPosition();                                                        //(3) 
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){         //(4)
 			 			
 			IMPLIES(
 				action.isClickOnButton &&                                                      //(5)
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() ) &&       //(6)
 				userCanRetrieveContent(action.getUser(), Output(Input(1),pos)) &&        	   //(7)	  
 				CREATE(Input(2), Input(1) )                     &&                              //(8)
 				Input(2).actions.get(pos).setFormInput(x, StaticInjectionString())  		   //(9)          
 				,

 				OR(                                                                            //(10)                                                      
		    		isError(Output(Input(2), pos)),                                                       
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))        
		    	)
 			);//end-IMPLIES
	 }//end-for parameter
    }//end-for action
   }
  }//end-MR
 }//end-package

