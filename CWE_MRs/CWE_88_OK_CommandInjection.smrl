import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * merge to AUTHZ001a
 * FABRIZIO: we need a concrete case
 * e.g., https://cve.circl.lu/cve/CVE-2017-1000392 (but is 79)
 * 
 * 
 * CWE Definition:
 * The software constructs a string for a command to executed by a separate component in another 
 * control sphere, but it does not properly delimit the intended arguments, options, or switches
 * within that command string.
 * 
 * Idea:
 * For all parameters of the actions we try to inject some commands to check whether the system is able
 * to neutralize the command injection or not.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Stores the parameters of the current action in a variable.
 * (3) Second for loop iterates over all parameters of the current action
 * (4) Verifies that the current URL has not been seen before
 * (5) Creates the follow-up input
 * (6) Sets the SQL injection strings to the parameter of the action 
 * (7) Checks that the system does not parse the command and the Input(1) and the follow-up input both get the same output.
 *     Or the result of the follow-up input is error
 *     Or the follow-up input can has the right to access
 */
 
 
 
 
 //";echo HELLO;"
 
MR CWE_88 { 
 { 
    for (Action action : Input(1).actions()){                                          //(1)
 		var pos = action.getPosition();                                                //(2) 
 		var size = Input (1).actions().size();
 		for (var x = 0; x < action.parameters.size; x++){                              //(3)
 		
 			IMPLIES(
 		
 				notTried( Input(1).actions().get(pos).getUrl() ) &&                    //(4)
 				EQUAL(Input(2), Input(1))&&                                            //(5)
 				Input(2).actions().get(pos).setParameterValue( x, CommandInjection() ) //(6)
 			    	    , 
		    				

		   OR(
			   // Assuming that the input sequence continues after 'pos', we may observe the effects of the attack in the following inputs.
               !different(Output(Input(1)).values.subList(pos,Input(1).actions.length)
               		, Output(Input(2)).values.subList(pos,Input(1).actions.length) ) 

    			, OR(
					//If we have an error the system has spotted the attack
                	isError(Output(Input(2), pos)),                       
					//If the output is different, the user shall anyway be able to retrieve the provided content
                	userCanRetrieveContent(action.getUser(), Output(Input(2)).values.subList(pos,size) )
                
				)
			)//end-RHS-OR
		);//end-IMPLIES
	}//end-for
 }} 
}//end-MR
}//end-package





