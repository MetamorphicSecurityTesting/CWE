import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
* CWE Definition:
 * The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, 
 * but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.
 * 
 * 
 * Idea: 
 * CRLF injections are vulnerabilities where the attacker is able to inject CR (carriage return, ASCII 13) and LF (line feed, ASCII 10) characters 
 * into the web application. This lets the attacker add extra headers to HTTP responses or even make the browser ignore the original content and 
 * process injected content instead.
 * Then, we inject some CRLF strings e.g. %0d%0a that %0d and %0a are encoded forms of \r and \n respectively, to the URL of the action to check whether the system can neutralize the input or not.
 * We expect the system to ignore the injected CRLF strings or show an error page.
 * In this version we will inject the CRLF strings after a separator in URL.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Defines a variable to store the position of the Input(1)'s action.
 * (3) Creates a new URL which includes CRLF strings.
 * (4) Checks that the URL has not been previously seen.
 * (5) Filters out the web pages with dynamic content.
 * (6) Creates the follow-up input by copying the Input(1).
 * (7) Sets the modified URL to the follow-up input.
 * (8) The user may retrieve an empty file or see an alert
 *     Or the user may see a content that already has right to access it
 *     Or the system mat show an error page to the user.
 *  
 * 
 * 
 */
 
MR CWE_93b { 
 { 	 
 	var sep="/";                                                     
 	for ( var par=0; par < 3; par++ ){                               
 		 
 	
    for ( Action action : Input(1).actions() ) {                      //(1)
	  	var pos = action.getPosition();                               //(2)
	    var newUrl = action.url + sep+ CRLFAttackString();                 //(3)  
			IMPLIES( 
				
				notTried( action.getUser(), newUrl )		&&	      //(4)	 					 
				userCanRetrieveContent(action.getUser(), Output(Input(1),pos))&&
				EQUAL( Input(2), Input(1) ) &&					      //(5)
			  	Input(2).actions().get(pos).setUrl( newUrl ) 	      //(6)
			    ,
			      OR(OR(                                                                           //(10)
		    		 //either the attack was not performed
		    		 Output(Input(2), pos).emptyFile,
		    		 //or no effect shall be observed (the effect is visualized when reaching the page where we inject the XSS)                  
		    	     Output(Input(2), pos).hasAlert   
		    	     ), OR( 
 					userCanRetrieveContent(action.getUser(), Output(Input(2),pos))  
 					,
 					isError(Output(Input(2), pos)))
 				//	userCanRetrieveContent(action.getUser(), Output(Input(2),pos))    
 		)	);
	}//end-for
 }//end-for
		
		sep=sep+"../";}
  
}//end-MR
}//end-package





