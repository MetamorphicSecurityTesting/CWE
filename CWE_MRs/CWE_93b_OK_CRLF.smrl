import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, 
 * but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.
 * 
 * Idea: We append a CRLF attack string, to perform an HTTP Response Splitting attack, which leads
 * to modify expected HTML content coming from the server.
 * A CRLF attack string may be the following "%0d%0a%0d%0aHTTP/1.0%20200%20OK%0d%0aContent-Length:%2014%0d%0aContent-Type:%20text/html%0d%0a%0d%0a<html>defaced</html>
 * 
 * It was successfully used for
 * https://bugtraq.securityfocus.com/detail/20040916150024.04B7BE5BC9
 * 
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Defines a variable to store the position of the Input(1)'s action.
 * (3) Defines a new URL with the injected value.
 * (4) Creates the follow-up input by copying the Input(1).
 * (5) Sets the modified URL to the follow-up input.
 * (6) Checks that the URL has not been previously seen.
 * (7) Makes sure that the result of Input(2) is either an error 
 *     Or The user is retrieving content that he has right to access.
 *  
 * 
 * 
 */
 
MR CWE_93b { 
 { 	 
 	var sep="/";                                                     //(1)
 	for ( var par=0; par < 3; par++ ){                               //(2)
 		 
 	
    for ( Action action : Input(1).actions() ) {                      //(1)
	  	var pos = action.getPosition();                               //(2)
       
	    var newUrl = action.url + sep+ CRLFAttackString();                 //(3)  
			IMPLIES( 
				notTried( action.getUser(), action.url )		&&	      //(4)	 					 
				EQUAL( Input(2), Input(1) ) &&					      //(5)
			  	Input(2).actions().get(pos).setUrl( newUrl ) 	      //(6)
			    ,
			      OR(OR(                                                                           //(10)
		    		 //either the attack was not performed
		    		 Output(Input(2), pos).emptyFile,
		    		 //or no effect shall be observed (the effect is visualized when reaching the page where we inject the XSS)                  
		    	     Output(Input(2), pos).hasAlert   
		    	     ), OR( 
 					userCanRetrieveContent(action.getUser(), Output(Input(2),pos))  
 					,
 					isError(Output(Input(2), pos)))
 				//	userCanRetrieveContent(action.getUser(), Output(Input(2),pos))    
 		)	);
	}//end-for
 }//end-for
		
		sep=sep+"../";}
  
}//end-MR
}//end-package





