/**
 * Authors:
 * Xuan Phu MAI, xuanphu.mai@uni.lu (First implementation)
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (Maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*

package smrl.mr.owasp {

 /**
 * 
 * CWE Definition:
 * CWE_276: During installation, installed file permissions are set to allow anyone to modify those files.
 * 
 * CWE_277: A product defines a set of insecure permissions that are inherited by objects that are created by the program.
 * 
 * Idea:
 * We merged these two CWE weaknesses as they both target a similar idea: a user should not be able to overwrite 
 * an admin file by writing its path in a file form.
 * 
 * Comments:
 * (1) The first loop iterates over all the actions of an input sequence.
 * (2) Stores the x-th action of the Input(1) in a variable.
 * (3) Stores the random file path in a variable.
 * (4) Stores the form inputs of the action in a variable. 
 * (5) The second loop looks for an action that contains a form that appear to be used to specify paths.
 * (6) Stores the input object of the i-th action in a variable.
 * (7) Verifies that the follow-up user is not an admin (admin may access any file).
 * (8) Verifies that the selected text input in a form contains a file path (or a file name).
 * (9) Verifies defines a follow-up input that is a copy of the source input.
 * (10) Puts a randomly selected path of an admin file in the selected form input of the follow-up sequence.
 * (11) Checks if the y-th action from the source input leads to an error page
 *      Or the output generated by sequence containing the path to the admin file
 *      is different than the output of the sequence performed by the original user. We do not check only
 *      for the output of action x because the error might be observed afterwards (e.g., during execution).
 * 
 * 
 */ 
  MR CWE_276_277_OTG_AUTHZ_002d {
  	{
		for ( var x=0; Input(1).containFormInputForFilePath() && x<Input(1).actions().size; x++) {                          //(1)
			var action = Input(1).actions.get(x);                                                                           //(2)
			var randomPath = RandomAdminFilePath();                                                                         //(3)
			var formInputs = action.formInputs;                                                                             //(4)
			for(var i=0; action.containFormInputForFilePath() && i< formInputs.size(); i++){                                //(5)
				var formInput = action.getFormInputs().get(i).getAsJsonObject();                                            //(6)
				
				IMPLIES(
					! isAdmin(action.user) &&                                                                               //(7)
					isFormInputForFilePath( formInput ) &&                                                                  //(8)
					CREATE (Input(2), Input(1)) &&                                                                          //(9)
					updateStringFormInput(Input(2).actions.get(x).getFormInputs().get(i).getAsJsonObject(), randomPath)     //(10)
					,	
					OR(                                                                                                     //(11)
						isError(Output(Input(1))),
						different(
							Output(Input(1)),
							Output(Input(2))
						)
					)
	  			); //end-IMPLIES
  			} //end-for
		} //end-for
    }
  } //end-MR
} //end-package