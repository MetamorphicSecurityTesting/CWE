import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
 /*
  * CWE Definition:
  * The application uses a protection mechanism that relies on the existence or values of a cookie, 
  * but it does not properly ensure that the cookie is valid for the associated user.
  * Attackers can easily modify cookies, within the browser or by implementing the client-side code
  * outside of the browser. Attackers can bypass protection mechanisms such as authorization and 
  * authentication by modifying the cookie to contain an expected value.
  * e.g. In a code excerpt reads a value from a browser cookie to determine the role of the user.
  * 
  * Idea:
  * if we can access to the cookie of an action, and we change it to another role with higher access level, 
  * like admin. the system should not allow the user to access information.
  * 
  * 
  * Comments:
  * (1) For loop iterates over all actions of the Input(1).
  * (2) Stores the parameters of the current action in a variable.
  * (3) Stores the current session of the user in a variable.
  * (4) For loop iterates over all actions of the Input(2).
  * (5) Makes sure that the action is accessible after the login.
  * (6) Makes sure that the Input(1) has a higher access level.
  * (7) Creates the follow-up input by copying the Input(2).
  * (8) Sets the same session as user for the follow-up input.
  * (9) The system should not allow the follow-up input to have the same output as the user, 
  *     Or It may show the error page.
  * 
  */
 

MR CWE_784{
	{
		for(Action action: Input(1).actions()){                                    //(1)
		var pos = action.getPosition();                                            //(2)		
		var session1 = Output( Input(1), pos).session;                             //(3)
		
		 for (Action action2: Input(2).actions()){                                 //(4)
		
				IMPLIES(
	  				
	  				afterLogin(action) &&                                          //(5)
	  				isSupervisorOf(Input(1), Input(2)) &&                          //(6)	  		//isSupervisorOf(User(),Input(1).actions().get(pos).user) 		
	  				EQUAL(Input(3), Input(2) )                                     //(7)
	  				&& Input(3).actions.get(action2.position).setSession(session1) //(8)   
                        ,
             OR(                                                                    //(9)
              different( Output( Input(1), pos) , Output(Input(3) , pos) )
,        isError( Output(Input(3) , pos)))
		);//end-IMPLIES
	}//end-for
	}}
}//end-MR
}//end-package





