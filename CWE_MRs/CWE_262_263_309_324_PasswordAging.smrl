/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 *  
 * CWE Definition:
 * CWE_262:
 * If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.
 * 
 * CWE_263:
 * Allowing password aging to occur may result in the possibility of diminished password integrity.
 * 
 * CWE_309:
 * The use of password systems as the primary means of authentication may be subject to several flaws 
 * or shortcomings, each reducing the effectiveness of the mechanism.
 * 
 * CWE_324:
 * The product uses a cryptographic key or password past its expiration date, which diminishes its 
 * safety significantly by increasing the timing window for cracking attacks against that key.
 * 
 * Idea:
 * All above-mentioned CWE weaknesses are related to the password aging concept, then, we merged them into one MR. 
 * We try to find logout and login actions and change the time passed between these two actions with the wait() function 
 * to check whether the system has any password aging mechanism.
 *  
 * 
 * Comments:
 * (1) For loop iterates over the Input(1)'s actions.
 * (2) Checks if the current action x is doing "log in".
 * (3) Checks that the action-x of the Input(1) does not include any errors.
 * (4) Creates the follow-up Input by copying the Input(1), named Input(2)
 * (5) Add a wait action to Input(2) that moves time forward for a year i.e. the expected time for reseting the password (password aging).
 * (6) Based on the above description the results should be different; it shall prompt a password update request.
 * 
 */ 
	MR CWE_262_263_309_324 {
		{
			for ( var x=0; x < Input(1).actions().size() ; x++ ){                                      //(1)
				
					IMPLIES ( 
						isLogin( Input(1).actions().get(x) ) &&                                        //(2)
						!isError ( Output(Input(1),x+1) )&&                                            //(3)
						CREATE ( Input(2) , Input(1) ) &&                                               //(4)				
						Input(2).addAction ( x, Wait( 60*60*24*30*12*1000) )                           //(5)                        
						,
						different ( Output(Input(2),x+2) ,  Output(Input(1),x+1))                      //(6)
					
					); //end-IMPLIES
				} //end-for
			} //end-for
	} //end-MR
} //end-package



