import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE_definition:
 * 
 * The software constructs all or part of an LDAP query using externally-influenced input from 
 * an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify the intended LDAP query when it is sent to a downstream component.
 * 
 * Idea:
 * We try to inject some LDAP query strings to all input entries of the actions, then
 * we will check whether the system can neutralize the injected inputs or not. 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Stores the position of the action parameter in a variable.
 * (3) Second for loop iterates over all parameters of the current action
 * (4) Store the parameter name
 * (5) Verifies that we did not already test in the past the parameter for the current URL
 * (6) Creates the follow-up input
 * (7) Sets the LDAP query strings to the parameter of the action
 * (8) Checks that the result of the follow-up input is error
 * (9) Or the follow-up input can has the right to access 
 * 
 * 
 */ 
MR CWE_90c {
 {
 	
 	keepDialogsOpen = true;
 	
	 for ( Action action : Input(1).actions() ) {                                                                   //(1)
	  	
	  	var pos = action.getPosition();                                                                            //(2)
	  	
	  	//System.out.println("ACTION "+pos+"/"+action.url);														   
	  		
	  		for (var x = 0; action.containLoginFormInput() && x < action.formInputs.size; x++){                    //(3)
	  			 IMPLIES(
	        		
	        	  action.isClickOnButton &&      
	        	  notTried(LDAPInjectionString() + x +action.url, Input(1).actions().get(pos).getElementURL() )  &&   //(4)
	        	  userCanRetrieveContent(action.getUser(), Output(Input(1),pos))      &&
	        	  !isError(Output(Input(1),pos))		&&													   //(5)							
	       		  EQUAL ( Input(2), Input(1) )	 &&   													   //(6)	                                                                        
	        	  Input(2).actions.get(pos).setFormInput(x, LDAPInjectionString())  			              
 				,

 				OR(different( Output(Input(1), pos),Output(Input(2), pos))
 					,OR(                                                                     
		    		isError(Output(Input(2), pos)),                                                       
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))        
		    	))
 			);
 	
 		}
 	}
 	
  } }
 }