/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * The software constructs a string for a command to executed by a separate component in another 
 * control sphere, but it does not properly delimit the intended arguments, options, or switches
 * within that command string.
 * 
 * Idea:
 * For all parameters of the actions we try to inject some commands to check whether the system is able
 * to neutralize the command injection or not.
 * 
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1).
 * (3) Stores the position of the current action in a variable.
 * (4) Stores the size of the action in a variable.
 * (5) Second for loop iterates over all parameters of the action that contains form input.
 * (6) Checks if the user will submit the form.
 * (7) Verifies that the current URL has not been seen before.
 * (8) Filters the web pages with dynamic content.
 * (9) Creates the follow-up input
 * (10) Sets the command injection strings to the parameter of the action 
 * (11) Checks that the system does not parse the command and the Input(1) and the follow-up input both get the same output.
 *     (Assuming that the input sequence continues after 'pos', we may observe the effects of the attack in the following inputs).
 *     Or the result of the follow-up input is error
 *     Or the follow-up input can has the right to access
 * 
 */
 
 
 
MR CWE_88b { 
 { 
  	keepDialogsOpen = true;                                                                                   //(1)

 	for (Action action : Input(1).actions()){                                                                 //(2)
 		
 		var pos = action.getPosition();                                                                       //(3) 
 		var size = Input (1).actions().size();                                                                //(4) 
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){                        //(5)
 				 
 			IMPLIES(
 				action.isClickOnButton &&                                                                     //(6)
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() ) &&                      //(7)
 				userCanRetrieveContent(action.getUser(), Output(Input(1)).values.subList(pos,size) ) &&       //(8)
 				CREATE(Input(2), Input(1) ) &&                                                                //(9)
 				Input(2).actions.get(pos).setFormInput(x, CommandInjection()) 		                          //(10)                                     
 				,		
		   OR(                                                                                                //(11)
			  
               !different(Output(Input(1)).values.subList(pos,Input(1).actions.length), Output(Input(2)).values.subList(pos,Input(2).actions.length) )
    		,
                 OR(
			     	isError( Output(Input(2) , pos) ),
			     	userCanRetrieveContent(action.getUser(), Output(Input(2)).values.subList(pos,size) ))
				
			)//end-RHS-OR
		);//end-IMPLIES
	}//end-for
 }} 
}//end-MR
}//end-package





