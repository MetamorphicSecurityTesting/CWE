import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * CWE Definition:
 * 
 * CWE_792:
 * The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.
 * 
 * CWE_793:
 * The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.
 * 
 * CWE_794:
 * The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.
 * 
 * CWE_795:
 * The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special 
 * elements that may exist before sending it to a downstream component.
 * 
 * CWE_796:
 * The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. "at the beginning/end 
 * of a string; the second argument"), thereby missing remaining special elements that may exist before sending it to a downstream component.
 * 
 * CWE_797:
 * The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. "byte number 10"), thereby missing 
 * remaining special elements that may exist before sending it to a downstream component.
 * 
 * 
 * Extra Details:
 * Developers should anticipate that special elements will be removed in the input vectors of their 
 * software system. Use an appropriate combination of denylists and allowlists to ensure only valid,
 * expected and appropriate input is processed by the system.
 * 
 * Idea:
 * Some systems only ignore the occurrence of special characters in specific part of the input, e.g. the first character.
 * In this MR we try to have multiple special characters in different parts of the input.
 * As the input value it gives all possible multiple occurrence of special characters in the list to check that the
 * system is vulnerable to them or not. 
 * 
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Iterates over all parameters of each action
 * (3) Stores the parameters of the action in the variable.
 * (4) Verifies that the action contains an input form.
 * (5) Creates the follow-up input by copying the Input(1)
 * (6) Sets the new input value which contains multiple special characters for the follow-up input.
 * (7) Verifies that the system should show an error page.
 * 
 * 
 */
 
MR CWE_792_793_794_795_796_797_B { 
	// This is similar to  CWE_703_166_77_76_75_74 

 { 
 	keepDialogsOpen = true;
 for ( Action action : Input(1).actions() ) {                                                                   //(1)
	  	
	  	var pos = action.getPosition();                                                                            //(2)
	  	
	  	//System.out.println("ACTION "+pos+"/"+action.url);														   
	  		
	  		for (var x = 0; action.containLoginFormInput() && x < action.formInputs.size; x++){                    //(3)
	  			
 	
 		
 				var value = Input(2).actions().get(pos).getFormInputs(); // getFormInputs().get(pos).getAsJsonObject()
 			
 			IMPLIES(
 				
 			//	notTried( x, Input(1).actions().get(pos).getUrl() ) &&                             //(5)
 				
 				 action.eventType == Action.ActionType.click &&    
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() ) &&        
 				
 				EQUAL(Input(2), Input(1) )                     &&                       //(7)
 				
 				Input(2).actions.get(pos).setFormInput(x, SpecialCharacters()+ value+SpecialCharacters()) 
 				                                 //(9)              
 				,
// 				true
 				OR ( isError(Output(Input(2), pos)) ,
		    	EQUAL(Output(Input(1), pos),Output(Input(2), pos)) ) 
 			
    
		    	
		);//end-IMPLIES
	}}//end-for
 } 
}//end-MR
}//end-package





