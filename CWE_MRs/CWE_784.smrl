import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/*
 * /*
  * The application uses a protection mechanism that relies on the existence or values of a cookie, 
  * but it does not properly ensure that the cookie is valid for the associated user.
  * Attackers can easily modify cookies, within the browser or by implementing the client-side code
  * outside of the browser. Attackers can bypass protection mechanisms such as authorization and 
  * authentication by modifying the cookie to contain an expected value.
  * e.g. In a code excerpt reads a value from a browser cookie to determine the role of the user.
  */
 

MR CWE_784{
	{
   for (Action action: Input(1).actions()){
      var pos = action.getPosition();
      var cookie = action.getCookie()
      var role = action.userRole(cookie)
      IMPLIES(   
      	       !isAdmin(Input(1))     
               && afterLogin(action)
               && EQUAL(Input(2), Input(1))
               && Input(2).actions.get(action.position).setCookie(setUserRoleAdmin(role,cookie))// remove tags from the cookie
             ,
             AND(
              different( Output( Input(1), pos) , Output(Input(2) , pos) )
,        isError( Output(Input(2) , pos)))
		);//end-IMPLIES
	}//end-for
	}
}//end-MR
}//end-package





