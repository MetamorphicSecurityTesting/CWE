/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import  smrl.mr.language.actions.StandardAction;
import jdk.internal.util.xml.impl.Input

package smrl.mr.owasp{
 
/**
 * 
 * CWE Definition:
 * 
 * CWE_643:
 * The software uses external input to dynamically construct an XPath expression used to 
 * retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. 
 * This allows an attacker to control the structure of the query.
 * 
 * 
 * CWE_652:
 * The software uses external input to dynamically construct an XQuery expression used to retrieve data 
 * from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows 
 * an attacker to control the structure of the query.
 *  
 * OWASP hint:
 * with XPath injection, the first step is to insert a single quote (') in the field to 
 * be tested, introducing a syntax error in the query, and to check whether the application 
 * returns an error message.
 * 
 * 
 * Idea:
 * In the login page instead of providing a correct value to the username field, we provide a malicious value 
 * ( e.g., "' or 1=1 or ''='") and a random value as a wrong password. If the system is vulnerable it may give access 
 * to the attacker. Therefore, if the system is not vulnerable it should show an error page or a content that the user 
 * has right to access.
 * Since every login interface provided by a different URL may be handled by a different implementation, in this MR, 
 * we perform the attack for every login action URL observed. 
 * The idea behind the CWE_643 that is about XPath is similar to the XQuery injection in CWE_652.
 * XQuery supports XPath and extended relational models. According to the real cases, we can trigger the weakness with the same inputs, 
 * then we merged these two CWE vulnerabilities together.
 * 
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1)
 * (3) Stores the parameters of the current action in a variable
 * (4) Iterates over the actions that contain a form input.
 * (5) Checks if the action submits the form; i.e. the action contains clicking on submit button.
 * (6) Filters the dynamic content.
 * (7) Verifies that the URL has not been tried before.
 * (8) Creates Input(2) as the follow-up input.
 * (9) Set the XQuery string as the form input value.
 * (10) The system should show an error page or a content that the user has right to access.
 * 
 */
 
  
MR CWE_643_652_B {
 {
	keepDialogsOpen = true;                                                                 //(1)
	
 	for (Action action : Input(1).actions()){                                               //(2)                                          
 		
 		var pos = action.getPosition();                                                     //(3)
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){      //(4)
 			
 			IMPLIES(
 			
 				action.isClickOnButton &&                                                   //(5)
 				userCanRetrieveContent(action.getUser(), Output(Input(1),pos))&&     		//(6)
 				notTried( action.url, Input(1).actions().get(pos).getElementURL() ) &&      //(7)
 				CREATE(Input(2), Input(1) )                     &&                          //(8)
 				Input(2).actions.get(pos).setFormInput(x, XQueryInjection())  			    //(9)       
 				,

 				OR(                                                                         //(10)                                                              
		    		isError(Output(Input(2), pos)),                                                       
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))        
		    	)
 			); //end-IMPLIES
  			} //end-for
		} //end-for
    }
  } //end-MR
} //end-package