import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;


package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * 
 * CWE_643:
 * The software uses external input to dynamically construct an XPath expression used to 
 * retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. 
 * This allows an attacker to control the structure of the query.
 * Cases that I have checked for CWE 643:
 * http://projects.webappsec.org/w/page/13247005/XPath%20Injection
 * https://www.exploit-db.com/exploits/10372
 * 
 * 
 * CWE_652:
 * The software uses external input to dynamically construct an XQuery expression used to retrieve data 
 * from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows 
 * an attacker to control the structure of the query.
 * Real Cases of CWE  652: https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-xquery-injection
 *      https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-xquery-injection
 * 
 * OWASP hint:
 * with XPath injection, the first step is to insert a single quote (') in the field to 
 * be tested, introducing a syntax error in the query, and to check whether the application 
 * returns an error message.
 * 
 * 
 * Idea:
 * The software uses external input to create an XQuery expression to retrieve data 
 * from an XML database, but it does not neutralize that input. This may lead to retrieving the 
 * information that the user does not have right to access.
 * 
 * 
 * In the login page instead of providing a correct value to the username field, we provide a malicious value ( e.g., "' or 1=1 or ''='") and a random value as a wrong password.
 * If the system is vulnerable it may give access to the attacker.
 * Therefore, if the system is not vulnerable it should show an error page or a content that the user has right to access.
 * Since every login interface provided by a different URL may be handled by a different implementation, in this MR, 
 * we perform the attack for every login action URL observed. 
 * The idea behind the CWE_643 that is about XPath is similar to the XQuery idea of CWE_652.
 * XQuery supports XPath and extended relational models. According to the real cases, we can trigger the weakness with the same inputs, 
 * then we merged these two CWE vulnerabilities together.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1)
 * (2) Stores the parameters of the current action in a variable
 * (3) Iterates over the actions that contain a form input.
 * (4) Verifies that the URL has not been tried before.
 * (5) Checks that the current user, Input(1), does not have any error in the output.
 * (6) Creates Input(2) as the follow-up input.
 * (7) Set the Xquery string for the username of the Input(2).
 * (8) The system should show an error page.
 *   
 */
 
MR CWE_643_652_C { 
 { 
 	keepDialogsOpen = true;
 	
    for ( Action action : Input(1).actions() ) {                                                                   //(1)
	  	
	  	var pos = action.getPosition();                                                                            //(2)
	  	  userCanRetrieveContent(action.getUser(), Output(Input(1),pos));
	  	//System.out.println("ACTION "+pos+"/"+action.url);														   
	  		
	  		for (var x = 0; action.containLoginFormInput() && x < action.formInputs.size; x++){                    //(3)
	  			 IMPLIES(
	        		
	        		  action.isClickOnButton && 
	        		   
	        		  notTried(XQueryInjection()+ x +action.url, Input(1).actions().get(pos).getElementURL() )  &&   //(4)
	        		  !isError(Output(Input(1),pos))		&&													   //(5)							
	       			  EQUAL ( Input(2), Input(1) )	   && 													   //(6)	                                                                        
	        		  Input(2).actions.get(action.position).setUsernameFormInput(x, XQueryInjection())          //(7)   "' or 1=1 or ''='"
		    , 
		    		 OR(                                                                     
		    		isError(Output(Input(2), pos)),                                                       
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))   
		    	     //     
		    	)                                                       //(8)  
		);//end-IMPLIES
	}//end-for
 } }
}//end-MR
}//end-package





