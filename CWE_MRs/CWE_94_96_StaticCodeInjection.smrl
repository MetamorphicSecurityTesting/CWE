/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import sun.security.util.Password

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * CWE_94: The software constructs all or part of a code segment using externally-influenced input 
 * from an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify the syntax or behavior of the intended code segment.
 * 
 * CWE_96 (child of CWE_94): The software receives input from an upstream component, but it does not 
 * neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, 
 * such as a library, configuration file, or template.
 * 
 * Idea:
 * While the programmer intends for the input sections i.e. messages; to only include data, an attacker can provide a message such as:
 *                         message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E
 * That can be decoded to 
 *                         <?php system("/bin/ls -l");?>
 * Then in this MR we are trying to inject some malformed strings(like the above) to the all input entries.
 * The system should not allow to complete the task by showing an error page or showing the content that the user
 * has right to access it.
 * 
 * 
 * 
 * Comments:
 * (1) For loop iterate over all actions of the Input(1)
 * (2) Stores the position of the action in a variable.
 * (3) The second loop iterates over all parameters of the action.
 * (4) Verifies the current parameter was not tested before.
 * (5) Filters out the web pages with dynamic content.
 * (6) Creates the follow-up input by copying the Input(1).
 * (7) Injects some Static injection strings to the follow-up input.
 * (8) The system may show an error page to the user 
 *     Or the user is retrieving the content that has right to access it.
 *  
 */
 
MR CWE_94_96 { 
 { 	
 	
    for ( Action action : Input(1).actions() ) {                                               //(1)
	  	var pos = action.getPosition();                                                        //(2)
	  	
	   	for ( var x =0; x < action.parameters.size; x++){                                      //(3)
	   IMPLIES( 
	   			notTried( x+action.url, Input(1).actions().get(pos).getElementURL() ) &&       //(4)
	   			userCanRetrieveContent(action.getUser(), Output(Input(1),pos)) &&              //(5)
	   			CREATE ( Input(2), Input(1) ) &&                                                //(6)
	   			Input(2).actions().get(pos).setParameterValue( x, StaticInjectionString() )    //(7)				    			
		    ,  
		    	OR(                                                                            //(8)
		    		 isError(Output(Input(2), pos)),                                                   
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos)) 
		    	     )
		    		    	
		);//end-IMPLIES
	}//end-for
 }
 } 
}//end-MR
}//end-package


