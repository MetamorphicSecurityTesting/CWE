import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import  smrl.mr.language.actions.StandardAction;
import jdk.internal.util.xml.impl.Input

package smrl.mr.owasp{

/**
 *
 * Webmin case: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8820
 * 
 * CWE Definition:
 * CWE_89:
 * The software constructs all or part of an SQL command using externally-influenced input 
 * from an upstream component, but it does not neutralize or incorrectly neutralizes special 
 * elements that could modify the intended SQL command when it is sent to a downstream component.
 * 
 * CWE_943:
 * The application generates a query intended to access or manipulate data in a data store such 
 * as a database, but it does not neutralize or incorrectly neutralizes special elements that can 
 * modify the intended logic of the query.
 * 
 * Idea:
 * If the system creates a query that accesses the data in the data store and uses the user's input, 
 * the system should neutralize the special elements of the user's input. CWE_89 and CWE_943 emphasize 
 * the importance of neutralizing the user's input; then, we merged these two weaknesses as they target 
 * the same weakness.
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1)
 * (3) Stores the parameters of the current action in a variable
 * (4) Iterates over the actions that contain a login form input.
 * (5) Checks if the action submits the form; i.e. the action contains clicking on submit button.
 * (6) Filters the dynamic content.
 * (7) Verifies that the URL has not been tried before.
 * (8) Verifies the output of the action does not contain any errors.
 * (9) Creates Input(2) as the follow-up input.
 * (10) Set the SQL string as the form input value.
 * (11) The system should show an error page or a content that the user has right to access.
 * 
 */ 
 
MR CWE_89_943_C {
 {
 	
 	keepDialogsOpen = true;                                                                                           //(1)
 	
	 for ( Action action : Input(1).actions() ) {                                                                     //(2)
	  	
	  	var pos = action.getPosition();                                                                               //(3)
	  	//System.out.println("ACTION "+pos+"/"+action.url);														   
	  		
	  		for (var x = 0; action.containLoginFormInput() && x < action.formInputs.size; x++){                       //(4)
	  			
	  			 IMPLIES(
	        		
	        	  action.isClickOnButton &&                                                                           //(5)
	        	  isLogin(action) &&
	        	  userCanRetrieveContent(action.getUser(), Output(Input(1),pos)) &&                                   //(6)
	        	  notTried(x+action.url, Input(1).actions().get(pos).getElementURL() )  &&                            //(7)
	        	  !isError(Output(Input(1),pos))		&&													          //(8) 							
	       		  EQUAL ( Input(2), Input(1) )	 &&   													              //(9)	                                                                        
	        	  Input(2).actions.get(pos).setFormInput(x, SQLInjectionString())  			                          //(10)
 				,

 				OR(                                                                                                   //(11)                                                           
		    		isError(Output(Input(2), pos)),                                                       
		    	   OR( userCanRetrieveContent(action.getUser(), Output(Input(2),pos)),   
					EQUAL(Output(Input(1),pos),Output(Input(2),pos))  )  
		    	)
 			);
 		}
 	}
 	
  } }
 }