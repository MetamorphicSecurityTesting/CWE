import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import java.util.Map.Entry;
import org.openqa.selenium.Cookie;
import smrl.mr.language.CookieSession;

package smrl.mr.owasp {
 
/*
 * CWE definition:
 * 
 * CWE_302
 * The authentication scheme or implementation uses key data elements that are assumed to be immutable, 
 * but can be controlled or modified by the attacker.
 * 
 * CWE_471:
 * The software does not properly protect an assumed-immutable element from being modified by an attacker.
 * 
 * CWE_472(child of CWE_471):
 * The web application does not sufficiently verify inputs that are assumed to be immutable but are actually 
 * externally controllable, such as hidden form fields.
 * 
 * CWE_784:
 * The application uses a protection mechanism that relies on the existence or values of a cookie, but it 
 * does not properly ensure that the cookie is valid for the associated user.
 * 
 * Idea:
 * Focus on cookies as the key data:
 * Set the cookie path to a random cookie to check whether the system authenticates the user or not.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Stores the parameters of the current action in a variable.
 * (3) Saves the cookie value of the Input(1) in a variable.
 * (4) Creates a follow-up input with different credentials.
 * (5) Saves the cookie value of the follow-up user in a variable.
 * (6) Stores the session key values in a variable.
 * (7) For loop iterates over the session values.
 * (8) Assigns the type of the cookie to a variable.
 * (9) Makes sure the URL is not accessible without login.
 * (10) Creates the follow-up input, named Input(3).
 * (11) set the session2 as the session value of the Input(3).
 * (12) Filters all cookie types other than Boolean.
 * (13) Flip the value of the boolean cookie.
 * (14) The system should give a different output or should show an error.
 *  
 * 
 */

MR CWE_302_471_472_784{ 
	{
   for (Action action: Input(1).actions()){                                                         //(1)
                        
      var pos = action.getPosition();                                                               //(2)
      var session = Output( Input(1), pos).session as CookieSession;                                //(3)
      
      EQUAL( Input(2), changeCredentials(Input(1), User()) )                                        //(4)
      var session2 = Output( Input(2), pos).session as CookieSession;                               //(5)
       
      var mappings = session.keyValueMappings.entrySet;                                             //(6)
      
         System.out.println("ACTION "+pos+"/**** session:"+session);

	  //It is suboptimal because incrementally update cookie values - but it's a tradeoff	
	  for ( Entry<String,String> cookie : mappings){                                                //(7)
	  		var type = typeOf(cookie.value);                                                        //(8)
	  		 System.out.println("ACTION "+pos+"/*** Cookie Value:  "+cookie.value);
	  	
	 		 System.out.println("ACTION "+pos+"/*** Type: "+type);
	  
      IMPLIES(             
      		cannotReachThroughGUI( User(), action.url )                                             //(9) 				
      		&& EQUAL( Input(3), Input(2) )                                                          //(10)
      		&& Input(3).actions.get(pos).setSession( session2 )                                     //(11)
      		&& type == Boolean                                                                      //(12)                        
            && session.setCookie(      
            	new Cookie(cookie.key, String.valueOf( ! Boolean.valueOf(cookie.value) ))           //(13)
            ),
             OR(                                                                                    //(14)
             	different( Output( Input(1), pos) , Output(Input(3) , pos) )   ,                   
		 		isError( Output(Input(3) , pos)))
		);//end-IMPLIES
		}
		}
		
	}//end-for
	
}//end-MR
}//end-package
