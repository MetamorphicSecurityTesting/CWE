/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE_definition:
 * 
 * The software constructs all or part of an LDAP query using externally-influenced input from 
 * an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify the intended LDAP query when it is sent to a downstream component.
 * 
 * Idea:
 * We try to inject some LDAP query strings to all input entries of the actions, then
 * we will check whether the system can neutralize the injected inputs or not. 
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1).
 * (3) Second for loop iterates over all parameters of the action that contains form input.
 * (4) Stores the position of the action parameter in a variable.
 * (5) Checks the user will submit the form.
 * (6) Verifies that we did not test the URL before.
 * (7) Checks that the action does not originally contain any alert.
 * (8) Filters out the web pages with dynamic content.
 * (9) Creates the follow-up input
 * (10) Sets the LDAP query strings to the parameter of the action
 * (11) Checks that the result of the follow-up input is different than the source input
 *      Or The output contains an alert or an error page is shown
 *      Or the follow-up input can retrieve a content that has the right to access 
 * 
 * 
 */
  
MR CWE_90b {
 {
 	keepDialogsOpen = true;                                                                                          //(1)

 	for (Action action : Input(1).actions()){                                                                        //(2)
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){                               //(3)
 			var pos = action.getPosition();                                                                          //(4) 
 			
 			IMPLIES(
 				
 				action.isClickOnButton &&                                                                            //(5)   
 				notTried( LDAPInjectionString() + x + action.url, Input(1).actions().get(pos).getElementURL() )  &&  //(6)
 				! Output(Input(1),pos).hasAlert	&&                                                                   //(7)
 				userCanRetrieveContent(action.getUser(), Output(Input(1),pos))&&                                     //(8)
 				CREATE(Input(2), Input(1) )                     &&                                                   //(9)
 				Input(2).actions.get(pos).setFormInput(x, LDAPInjectionString())		                             //(10)              
 				,

 				OR( 
 					Output(Input(2), pos).hasAlert
 				,  
		    	    OR( 
 						userCanRetrieveContent(action.getUser(), Output(Input(2),pos)) ,
 						isError(Output(Input(2), pos))))
 				);//end-IMPLIES
	 }//end-for
   }//end-for
  } 
 }//end-MR
}//end-package