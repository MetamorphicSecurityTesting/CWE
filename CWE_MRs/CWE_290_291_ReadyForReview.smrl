import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * CWE_290:
 * This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.
 * 
 * CWE_291 (Child of CWE_291):
 * The software uses an IP address for authentication.
 * 
 * IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send,
 * but response packets will return to the forged IP address. To see the response packets, the attacker has
 * to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required 
 * sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. 
 * Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled
 * across much of the Internet today. 
 * 
 * Idea:
 * In summary, IP address verification can be a useful part of an authentication scheme, but it should not be 
 * the single factor required for authentication. Then, we will check that for an action with valid IP (user can take the action) 
 * if we set a null session the system will authenticate the user or not.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all Input(1)'s actions
 * (2) The parameters of the current action is stored in the variable.
 * (3) It makes sure that the action is available after the login.
 * (4) Creates the follow-up input by copying the Input(1), named Input(2).
 * (5) Sets a null session for the follow-up input.
 * (6) Verifies that the action can be taken by the current user. i.e. if the IP is not valid the browser will not let us to take the action and will show an error page.
 *     AND The results of the performing the same action by Input(1) and Input(2) 
 *     should be different, or the system shows an error page for Input(2).
 * 
 */
 
MR CWE_290_291{ 
 { 
    for ( Action action : Input(1).actions() ) {                             //(1)
	  	var pos = action.getPosition();                                      //(2)
	  	
	   IMPLIES(
	   	
	        
	          afterLogin(action)                                             //(3)  	 				
	          &&  EQUAL ( Input(2), Input(1) )	                             //(4)	 
	    	  && Input(2).actions.get(action.position).setSession(null)      //(5)
	    	  //&& userCanRetrieveContent( action.user, Output(Input(1),pos) )     
		    ,
		                                                                //(6)
		    	  
		    	//	!isError(Output(Input(1), pos)),                      
		    	//    userCanRetrieveContent( action.user, Output(Input(1),pos)      
		                             
		           OR(                                                       
		    	    isError(Output(Input(2), pos)),
		    	    different ( Output(Input(1),pos),  Output(Input(2),pos))
		    	
		    	)
		    	
		);//end-IMPLIES
	}//end-for
 } 
}//end-MR
}//end-package





