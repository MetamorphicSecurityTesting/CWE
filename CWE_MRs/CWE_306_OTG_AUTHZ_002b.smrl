import static smrl.mr.language.Operations.*

package smrl.mr.owasp {

   /**
   * 
   * CWE Definition:
   * The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.
   * 
   * Idea:
   * If a certain action is not available to a given user, this user should not be able to perform the action.
   * Assume we have two users, user a and user b. Given (1) a source input as a sequence of actions performed by a user 'a'
   * which contains an action y that is dedicated to user a (i.e., it is not visible to user b) and (2) a follow-up input 
   * that is a copy of that sequence which, however, includes, before action y, an action that matches action y (e.g., same
   * URL requested) but is performed by user 'b' . 
   * The result of action y should not be different when performed in the source input (i.e., without any action of b)
   * or in the follow-up input (i.e., when performed also by user b). 
   * In other words, the action of user b should be ignored by the system and not interfere with the action of user a.
   * 
   * Comment:
   * (1) The first loop iterates over the actions of the source input to identify a login operation (action x) for user a, 
   * (2) The second loop iterates over the remaining y-th actions.
   * (3) Checks whether the user in User() is not a supervisor of the user performing the y-th action.
   * (4) Checks that action y cannot be accessed by user b (User()).
   * (5) Defines Input(2) which just performs a login.
   * (6) Defines Input(3) which just performs a login as user b.
   * (7) Creates a copy of Input(1) with a login as b before action y (this way action y is performed as User b).
   * (8) Adds after action y+1 (the original action y now shifted) new copy of action y (now performed by user b).
   * (9) Adds after the new copy of action y a new login as user a.
   * (10) The system checks that the output of the action y in the two sequences remains the same when 
   *      performed by user a (in the follow-up sequence the action of user a is shifted by three because 
   *      three actions are introduced, the login of user b, the current action and a new login for user a).
   *   
   *   	
   */ 
   
  MR CWE_306_OTG_AUTHZ_002b {
  	{
    	for(var x = 0; x < Input(1).actions().size() ; x++){                                                    //(1)
			for (var y = x+1; isLogin(Input(1).actions().get(x)) && (y < Input(1).actions().size()); y++) {     //(2)
	  			IMPLIES(
	  				//1st par of IMPLIES including 7 clauses
	  				(!isSupervisorOf(User(), Input(1).actions().get(y).user)) &&                                //(3)
	  				cannotReachThroughGUI(User(), Input(1).actions().get(y).getUrl()) &&                        //(4)
	  				EQUAL(Input(2), Input(1).actions().get(x)) &&                                               //(5)
	  				EQUAL(Input(3), changeCredentials(Input(2), User())) &&                                     //(6)
	  				EQUAL(Input(4), addAction(Input(1), y, Input(3).actions().get(0))) &&                       //(7)
					EQUAL(Input(5), addAction(Input(4), y+1, Input(1).actions().get(y))) &&                     //(8)
					EQUAL(Input(6), addAction(Input(5), y+2, Input(1).actions().get(x) ) )                      //(9)
	  				,
	  				//2nd par of IMPLIES
	  				EQUAL(                                                                                      //(10)
	  					Output(Input(1), y)
	  					,
	  					Output(Input(6), y+3 )
	  				)
	  			); //end-IMPLIES
  			} //end-for
		} //end-for
    }
  } //end-MR
} //end-package