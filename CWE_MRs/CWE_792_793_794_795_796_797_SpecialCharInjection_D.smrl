/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
* CWE Definition:
 * CWE_792: The software receives data from an upstream component, but does not completely 
 * filter one or more instances of special elements before sending it to a downstream component.
 * 
 * CWE_793: The software receives data from an upstream component, but only filters a single 
 * instance of a special element before sending it to a downstream component.
 * 
 * CWE_794: The software receives data from an upstream component, but does not filter all 
 * instances of a special element before sending it to a downstream component.
 * 
 * CWE_795: The software receives data from an upstream component, but only accounts for special 
 * elements at a specified location, thereby missing remaining special elements that may exist 
 * before sending it to a downstream component
 * 
 * CWE_796: The software receives data from an upstream component, but only accounts for special 
 * elements positioned relative to a marker (e.g. "at the beginning/end of a string; the second 
 * argument"), thereby missing remaining special elements that may exist before sending it to a 
 * downstream component.
 * 
 * CWE_797: The software receives data from an upstream component, but only accounts for special 
 * elements at an absolute position (e.g. "byte number 10"), thereby missing remaining special 
 * elements that may exist before sending it to a downstream component.
 * 
 * Idea:
 * In this MR, we will check if the system is vulnerable to special character injection or not.
 * In the other word, we test if the system under test has an input validation mechanism for the inputs from the user.
 * 
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1).
 * (3) Iterates over all actions that contain a form input.
 * (4) Stores the parameters of the action in the variable. 
 * (5) Reads the user's input value and keeps it in a variable.
 * (6) Checks if the user submits the form (action contains clicking on the submit button).
 * (7) Filters out the boolean input values.
 * (8) Checks if the URL was not tried before, to speed up the process.
 * (9) Creates the follow-up input by copying the Input(1)
 * (10) Sets the new input value which contains special character for the follow-up input.
 * (11) Verifies that the system should show an error page or it would neutralize the input.
 * 
 */
 
MR CWE_792_793_794_795_796_797_D{ 
 { 
    keepDialogsOpen = true;                                                                                    //(1)      
 	for (Action action : Input(1).actions()){                                                                  //(2)
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){                         //(3)			
 			
 			var pos = action.getPosition();                                                                    //(4) 
 			var value1 = Input(1).actions().get(pos).getFormInputs().get(x).getAsJsonObject();                 //(5)
 			
 			IMPLIES(
 				
 				action.isClickOnButton &&                                                                       //(6) 
 				value1 != Boolean &&                                                                            //(7)
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() ) &&                        //(8)
 				CREATE(Input(2), Input(1) )     &&                                                               //(9)
 				Input(2).actions.get(pos).setFormInput(x,  SCInjection_last(value1 , SpecialCharacters())) 	    //(10)              
 				,

 				OR(                                                                                             //(11)
		    		isError(Output(Input(2), pos)),                                                     
		    	     EQUAL(Output(Input(1), pos),Output(Input(2), pos))       
		    	)
 			);
 		}
 	}
 	
  } }
 }
