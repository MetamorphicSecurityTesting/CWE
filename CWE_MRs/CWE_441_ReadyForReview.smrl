import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE Definition:
 * The product receives a request, message, or directive from an upstream component, but the product 
 * does not sufficiently preserve the original source of the request before forwarding the request 
 * to an external actor that is outside of the product's control sphere. This causes the product to 
 * appear to be the source of the request, leading it to act as a proxy or other intermediary between 
 * the upstream component and the external actor.
 *   
 * Idea:
 * A file path passed in the URL of a request should never enable a 
 * user to access data that is not provided by the user interface.
 * 
 *** Real case: https://curl.se/docs/CVE-2009-0037.html
 * 
 * Comments:
 * (2) Second for loop iterates over all actions of the Input(1).
 * (3) Stores the parameters of the current action in a variable.
 * (4) Defines the new URL.
 * (5) Checks if the current action has not been performed.
 * (6) Defines a follow-up input that is a copy of the source input.
 * (7) Adds to the end of the current URL a relative path to a file.
 * (8) Verifies that the given path was not tried in a previous execution of the loop (to speed up).
 * (9) Verifies that the follow-up input does not lead to a file 
 *      Or the returned file is something that the user has the right to access.
 *      Or the system shows an error page.

 *
 * 
 */ 
MR CWE_441 {
 { 
		for ( Action action : Input(1).actions() ){                                      //(2)
			 
			var pos = action.getPosition();                                              //(3)
			var newUrl = "scp://" + RandomFilePath();                                    //(4)   //Nazanin: scp://name:passwd@host/a'... how to define the first protocol? is this always the same? I mean can we use 'scp://' for all newUrls?
			  
			IMPLIES(
				
				notTried(action.user, Input(1).actions().get(pos).getUrl())&&            //(5)
				EQUAL( Input(2), Input(1) ) &&					                         //(6)
			  	Input(2).actions().get(pos).setUrl( newUrl )	                         //(7)
			    ,
			    OR(
		    		 isError(Output(Input(2), pos)),                                     //(8)                  
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))      //(9)
		    	)
			);//end-IMPLIES
		}//end-for
 }
}//end-MR
}
