import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE Definition:
 * The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the 
 * intended sphere of control, causing the product to embed incorrect documents into its output.
 * 
 * XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of 
 * XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser 
 * can access the contents of this URI and embed these contents back into the XML document for further processing.
 * 
 * Idea:
 * For all pages that the user can upload a file we try to upload the malformed XML file.
 * the system should not verify the request in the XML file. It means the system should
 * show the content to the user that has the right to access to it or an error page. 
 *
 * Comments:
 * (1) It avoids clicking on OK; because dialogs are normally ignored by our framework by clicking on OK.
 * (2) For loop iterates over all actions of the Input(1).
 * (3) Stores the parameters of the current action in a variable.
 * (4) Second for loop iterates over all parameters of the current action and verifies that the action has input form.
 * (5) Checks that user submits the form.
 * (6) Verifies that the current URL has not been seen before, to speed up the process.
 * (7) Checks that the action originally does not contain any alert.
 * (8) Creates the follow-up input
 * (9) Uploads the malformed XML file to the parameter of the action.
 * (10) Checks that the result of the follow-up input is error
 *     Or the follow-up input can has the right to access 
 *     Or the user will retrieve an empty file or she will see an alert message.
 * 
 * 
 */
 
MR CWE_611 { 
 { 
 	keepDialogsOpen = true;                                                                    //(1)

 	for (Action action : Input(1).actions()){                                                  //(2)
 		
 		var pos = action.getPosition();                                                        //(3) 	
 		System.out.println("ACTION "+pos+"/"+Input(1).actions().size());
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){         //(4)
 			
 			System.out.println("ACTION "+pos+"/////"+x);
 			IMPLIES(
 				action.isClickOnButton &&                                                      //(5)    
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() )  &&      //(6)
 				! Output(Input(1),pos).hasAlert					&&                             //(7)
 			    EQUAL(Input(2), Input(1) )                     &&                              //(8)
 				Input(2).actions.get(pos).setFormInput(x,  XMLInjectedFile())                  //(9)
 				,

 				OR(                                                                            //(10)
 					OR(
 						different( Output(Input(1),pos+1),Output(Input(2),pos+1)),
 						isError(Output(Input(2),pos+1))
 					)
 					,
 					OR(                                                                           
		    		 //It depends on the system 
		    		 Output(Input(2), pos+1).emptyFile,             
		    	     ! Output(Input(2), pos+1).hasAlert       
		    	))
 			);//end-IMPLIES
		}//end-for
	}//end-for
 }
}//end-MR
}