import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * The software receives input from an upstream component, but it does not handle or incorrectly handles 
 * when an expected special element is missing.
 * 
 * CWE_703:
 * The software does not properly anticipate or handle exceptional conditions that rarely occur during 
 * normal operation of the software. 
 * 
 * CWE_166:
 * The software receives input from an upstream component, but it does not handle or incorrectly handles 
 * when an expected special element is missing. 
 * 
 * CWE_78:
 * The software constructs all or part of an OS command using externally-influenced input from an upstream 
 * component, but it does not neutralize or incorrectly neutralizes special elements that could modify 
 * the intended OS command when it is sent to a downstream component. 
 * 
 * CWE_77:
 * The software constructs all or part of a command using externally-influenced input from an upstream 
 * component, but it does not neutralize or incorrectly neutralizes special elements that could modify 
 * the intended command when it is sent to a downstream component. 
 * 
 * CWE_76:
 * The software properly neutralizes certain special elements, but it improperly neutralizes equivalent 
 * special elements. 
 * 
 * CWE_75:
 * The software does not adequately filter user-controlled input for special elements with control implications. 
 * 
 * CWE_74:
 * The software constructs all or part of a command, data structure, or record using externally-influenced 
 * input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify how it is parsed or interpreted when it is sent to a downstream component. 
 * 
 * CWE_91:
 * 
 * 
 * Extra Details:
 * Developers should anticipate that special elements will be removed in the input vectors of their 
 * software system. Use an appropriate combination of denylists and allowlists to ensure only valid,
 * expected and appropriate input is processed by the system.
 * 
 * Idea:
 * As the input value it gives all possible special characters in the list to check that the
 * system is vulnerable to them or not.
 * 
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Iterates over all parameters of each action
 * (3) Stores the parameters of the action in the variable.
 * (4) Reads the user's input value and keeps it in a variable.
 * (5) Checks if the URL was not tried before, to speed up the process.
 * (6) Filters out the boolean input values.
 * (7) Creates the follow-up input by copying the Input(1)
 * (8) Sets the new input value which contains special character for the follow-up input.
 * (9) The system should show an error page to the user or neutralize the effect of the special character.
 * 
 * 
 */
 
MR CWE_703_166_78_77_76_75_74_91 { 
 { 
     for ( Action action : Input(1).actions() ) {                                           //(1)
	  for ( var par=0; par < action.getParameters().size(); par++ ){                        //(2)  
	  	
	  	var pos = action.getPosition();                                                     //(3)
	  	var value = Input(1).actions().get(pos).getParameterValue(par);                     //(4)
	  	
	        IMPLIES(
	        	notTried( Input(1).actions().get(pos).getUrl() ) &&                         //(5)
	        	value != Boolean &&	                                                        //(6)		
	            EQUAL ( Input(2), Input(1) ) &&		                                        //(7)		    			
	    	    Input(2).actions().get(pos).setParameterValue(par, SpecialCharacters())     //(8)  
		    
		    	,OR(                                                                        //(9)
		    		EQUAL(Output(Input(1), pos),Output(Input(2), pos)) ,
		    		isError(Output(Input(2), pos)))
		);//end-IMPLIES
	}}//end-for
 } 
}//end-MR
}//end-package





