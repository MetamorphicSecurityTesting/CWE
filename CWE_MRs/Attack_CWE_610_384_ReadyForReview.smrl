import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE Definition:
 * Authenticating a user, or otherwise establishing a new user session, without invalidating any
 * existing session identifier gives an attacker the opportunity to steal authenticated sessions.
 * 
 * A web application authenticates a user without first invalidating the existing session, thereby
 * continuing to use the session already associated with the user. An attacker is able to force a known
 * session identifier on a user so that, once the user authenticates, the attacker has access to the 
 * authenticated session. The application or container uses predictable session identifiers. In the 
 * generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web 
 * application and records the associated session identifier. The attacker then causes the victim to 
 * associate, and possibly authenticate, against the server using that session identifier, giving the 
 * attacker access to the user's account through the active session.
 * 
 * Comments: 
 * (1) The first loop iterates over all the actions to find a login action.
 * (2) The second loop iterates over all the actions to find an action performed after login.
 * (3) Checks if the current action y is a login operation.
 * 
 * FABRIZIO: In my opinion we shall simply perform a login within another logged in session. No logout is needed.
 * 
 * (4) Defines a follow-up input with the sequence of two logins.
 * (5) Verifies that the system assigns different session IDs after the login,
 * (6) Checks that the previous session ID is not valid anymore.
 *   
 */ 
MR CWE_610_384 {
		{
			for ( var x = 0; x < Input(1).actions().size(); x++ ){   //(1)
				for ( var y = x+1; isLogin(Input(1).actions().get(x)) && (y < Input(1).actions().size()); y++){  //(2)
					IMPLIES ( 
						isLogin( Input(1).actions().get(y) ) &&       //(3)        
						EQUAL ( Input(2) , copyActionTo( Input(1), x, y ) ) //(4)
						
						//EQUAL(Input(3), addAction(Input(2), y+1, Input(1).actions().get(y)))
						 
						, 
						AND( different ( Output(Input(2),x+1).getSession(),  Output(Input(2),y+1).getSession() ) //(5)
						,
						inValid( Output(Input(2),x+1).getSession()) //(6)  //FABRIZIO: what is this supposed to do? checks that the previous login(x) session has been invalidated (terminated).
						
						)
					); //end-IMPLIES
				} //end-for
			} //end-for
		}
	} //end-MR
} //end-package

