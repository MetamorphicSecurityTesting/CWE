import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import smrl.mr.language.CookieSession;

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * CWE_290:
 * This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.
 * 
 * CWE_291 (Child of CWE_291):
 * The software uses an IP address for authentication.
 * 
 * IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send,
 * but response packets will return to the forged IP address. To see the response packets, the attacker has
 * to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required 
 * sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. 
 * Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled
 * across much of the Internet today. 
 * 
 * Idea:
 * In summary, IP address verification can be a useful part of an authentication scheme, but it should not be 
 * the single factor required for authentication. Then, we will check that for an action with valid IP (user can take the action) 
 * if we set a null session the system will authenticate the user or not.
 * 
 * 
 * Comments:
 * (1) For loop iterates over all Input(1)'s actions
 * (2) Stores the parameters of the current action in a variable.
 * (3) It makes sure that the action is available after the login.
 * (4) Filters the web pages with dynamic content.
 * (5) Creates the follow-up input by copying the Input(1), named Input(2).
 * (6) Sets a null session for the follow-up input.
 * (7) Filter out the refresh action.( makes sure the user does not perform the same action in the next iteration)
 * (8) Verifies that the system would show a content that the user has right to access
 *     Or it would show an error page or the user will see a different result than1 the source input.
 * 
 * 
 */
 
MR CWE_290_291{ 
 { 
    for ( Action action : Input(1).actions() ) {                                        //(1)
	  	var pos = action.getPosition();                                                 //(2)
	
	   IMPLIES(
	          afterLogin(action)                                                        //(3)
	          &&  userCanRetrieveContent(action.getUser(), Output(Input(1),pos))        //(4)  	 				
	          &&  EQUAL ( Input(2), Input(1) )	                                        //(5)	 
         	  && Input(2).actions.get(pos).setSession( new CookieSession() )            //(6)
	    	  && ! sameUrl( action.currentURL, action.elementURL )                      //(7)
		    ,		    
		   
		      	OR( isError(Output(Input(2), pos)),
		    	 	different ( Output(Input(1),pos),  Output(Input(2),pos)))//)
		    	
		);//end-IMPLIES
	}//end-for
 } 
}//end-MR
}//end-package





