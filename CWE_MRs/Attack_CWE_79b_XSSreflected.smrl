import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import  smrl.mr.language.actions.StandardAction;
import jdk.internal.util.xml.impl.Input

package smrl.mr.owasp{

/**
 *
 * Webmin case: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8820
 * 
 * CWE Definition:
 * The software does not neutralize or incorrectly neutralizes user-controllable input 
 * before it is placed in output that is used as a web page that is served to other users.
 * 
 * 
 * Comments:
 * (1) 
 * (2) For loop iterates over all actions of the Input(1)
 * (3) Stores the parameters of the current action in a variable
 * (4) The second loop iterates over the actions that contains a form input.
 * (5) Verifies that the URL is not visited before.
 * (6) Checks that the action does not normally lead to an alert.
 * (7) Creates the follow-up input with different credentials, named Input(2).
 * (8) Sets a XSS string for the parameter of Input(2).
 * (9) Checks that the result of the source input and the follow up input is different.
 * (10) Verifies that the result of the action is not an empty file,
 *      it means that the system neutralize the input 
 *      and also it double checks that the action does not lead to an alert.
 * 
 */ 
MR CWE_79b_XSSreflected {
 {
	keepDialogsOpen = true;                                                                     //(1)

 	for (Action action : Input(1).actions()){                                                   //(2)
 		var pos = action.getPosition();                                                         //(3) 
 		
 		//System.out.println("ACTION "+pos+"/"+Input(1).actions().size());
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){          //(4)
 			
 			IMPLIES(
 				         
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() )  &&        //(5)
 				! Output(Input(1),pos).hasAlert	&&                                               //(6)          
 				EQUAL(Input(2), Input(1) )  &&                                                   //(7)
 				Input(2).actions.get(pos).setFormInput(x, XSSInjectionString())                  //(8)                                    
 				,
 				
 				OR( 
 					different( Output(Input(1),pos),Output(Input(2),pos))                         //(9)
 					,
 					OR(                                                                           //(10)
		    		 
		    		 Output(Input(2), pos).emptyFile,               
		    	     ! Output(Input(2), pos).hasAlert        //reflected XSS
		    	))
 			);
 		}
 	}
 	
  } }
 }