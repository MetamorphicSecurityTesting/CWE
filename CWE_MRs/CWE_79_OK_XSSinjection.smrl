import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import sun.security.util.Password

package smrl.mr.owasp {
 
/**
 * 
 * CWE Definition:
 * XSS: The software does not neutralize or incorrectly neutralizes user-controllable input 
 * before it is placed in output that is used as a web page that is served to other users.
 * 
 * Idea:
 * for all actions we inject the URL of the action with XSS strings to verify that 
 * is there any vulnerable URL in the system or not. The system should show an error page
 * or a different output after injecting the URL.
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Defines a variable to store the position of the Input(1)'s action.
 * (3) Defines a new URL with the injected XSS value.
 * (4) Creates the follow-up input by copying the Input(1).
 * (5) Sets the modified URL to the follow-up input.
 * (6) Checks that the URL has not been previously seen.
 * (7) Makes sure that the result of the Input(1) and the follow-up input is different
 *     Or The user is retrieving the content that has right to access it.
 *  
 * 
 * 
 */
 
MR CWE_79_a_XSSreflected { 
 { 	
 	//Dialogs are normally ignored by our framework by clicking on OK; with the following we avoid clicking on OK
 	keepDialogsOpen = true; 
 	
    for ( Action action : Input(1).actions() ) {  

	  	var pos = action.getPosition();                               
	  	
	  	//We try to inject every URL parameter, one after teh other
	    for ( var x =0; x < action.parameters.size; x++){        //(2)
  
			IMPLIES(
				//We verify to not have tested the same URL before; there is no reason for testing a same URL
				 notTried( x, action.url )&&
				 //No pop-up / alert dialog shown normally
				! Output(Input(1), pos).hasAlert   &&	 
				//We create the follow-up input as a copy of the source input					 
				EQUAL( Input(2), Input(1) ) &&					      //(4)
				//We put an XSS payload as parametr text
			  	Input(2).actions().get(pos).setParameterValue(x,XSSInjectionString()) 
			    ,
			    OR(
		    		//either the attack was not performed
		    	    Output(Input(2), pos).emptyFile,       
		    	    //or no effect shall be observed (the effect of the XSS is usually visualized when reaching the page where we inject the XSS)
		    	   ! Output(Input(2), pos).hasAlert  ) 
		);//end-IMPLIES
	}//end-for parameter
   }//end-for action
  }
}//end-MR
}//end-package





