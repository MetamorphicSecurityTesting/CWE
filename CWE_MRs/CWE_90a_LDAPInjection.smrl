/**
 * Authors:
 * Nazanin Bayati Chaleshtari, n.bayati@uottawa.ca (First implementation and maintenance)
 * Fabrizio Pastore, fabrizio.pastore@uni.lu (Validation)
 */

import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE_definition:
 * 
 * The software constructs all or part of an LDAP query using externally-influenced input from 
 * an upstream component, but it does not neutralize or incorrectly neutralizes special elements 
 * that could modify the intended LDAP query when it is sent to a downstream component.
 * 
 * Idea:
 * We try to inject some LDAP query strings to all input entries of the actions, then
 * we will check whether the system can neutralize the injected inputs or not. 
 * 
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Second for loop iterates over all parameters of the current action.
 * (3) Stores the position of the action parameter in a variable.
 * (4) Stores the parameter name.
 * (5) Verifies that we did not already test the parameter for the current URL.
 * (6) Checks that the action does not originally contain any alert.
 * (7) Filters out the web pages with dynamic content.
 * (8) Creates the follow-up input
 * (9) Sets the LDAP query strings to the parameter of the action
 * (10) Checks that the result of the follow-up input is different than the source input
 *      Or The output contains an alert or an error page is shown
 *      Or the follow-up input can retrieve a content that has the right to access 
 * 
 */ 
 
MR CWE_90a {
 {
 
 	for (Action action : Input(1).actions()){                                                                   //(1)
 		for (var x = 0; x < action.parameters.size; x++){                                                       //(2)
 			
 			var pos = action.getPosition();                                                                     //(3)  
 			var parameterName = action.parameters.get(x).key;                                                   //(4)
 			
 			IMPLIES(
 				notTried(LDAPInjectionString() + x + parameterName, Input(1).actions().get(pos).getUrl() ) &&   //(5)
 				NOT(NULL(Output(Input(1), pos)))&&                                                              //(6)
 			    userCanRetrieveContent(action.getUser(), Output(Input(1),pos)) &&                               //(7)
 				CREATE(Input(2), Input(1))&&                                                                    //(8)
 				Input(2).actions().get(pos).setParameterValue( x, LDAPInjectionString() )                       //(9)		   
 				,
 			OR(                                                                                                 //(10)
		    	    Output(Input(2), pos).hasAlert   
		    ,	OR( 
 					isError(Output(Input(2), pos)),
 					userCanRetrieveContent(action.getUser(), Output(Input(2),pos))))
 		);//end-IMPLIES
	 }//end-for
   }//end-for
  } 
 }//end-MR
}//end-package
