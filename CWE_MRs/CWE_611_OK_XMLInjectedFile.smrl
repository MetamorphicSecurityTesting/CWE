import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;

package smrl.mr.owasp{

/**
 * CWE Definition:
 * The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the 
 * intended sphere of control, causing the product to embed incorrect documents into its output.
 * 
 * XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of 
 * XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser 
 * can access the contents of this URI and embed these contents back into the XML document for further processing.
 * 
 * Idea:
 * For all pages that the user can upload a file we try to upload the malformed XML file.
 * the system should not verify the request in the XML file. It means the system should
 * show the content to the user that has the right to access to it or an error page. 
 *
 * Comments:
 * (1) For loop iterates over all actions of the Input(1).
 * (2) Stores the parameters of the current action in a variable.
 * (3) Second for loop iterates over all parameters of the current action and verifies that the action has input form.
 * (4) Verifies that the current url has not been seen before
 * (5) Creates the follow-up input
 * (6) Uploads the malformed XML file to the parameter of the action.
 * (7) Checks that the result of the follow-up input is error
 *     Or the follow-up input can has the right to access 
 * 
 * 
 */
 
MR CWE_611 { 
 { 
 	keepDialogsOpen = true;

 	for (Action action : Input(1).actions()){                                                  //(1)
 		var pos = action.getPosition();                                                        //(2) 
 		
 		System.out.println("ACTION "+pos+"/"+Input(1).actions().size());
 		
 		for (var x = 0; action.containFormInput() && x < action.formInputs.size; x++){                                      //(3)
 			
 			System.out.println("ACTION "+pos+"/////"+x);
 			IMPLIES(
 				
 				//We are about to submit a form
 				//action.eventType == Action.ActionType.click &&  
 					action.isClickOnButton &&      
 				notTried( x+action.url, Input(1).actions().get(pos).getElementURL() )  &&                             //(5)
 				
 				! Output(Input(1),pos).hasAlert					&&                              //(6)
 			      
 				EQUAL(Input(2), Input(1) )                     &&                       //(7)
 				
 			
 				Input(2).actions.get(pos).setFormInput(x,  XMLInjectedFile()) 
 				
 				                                 //(9)              
 				,

 				OR( 
 					different( Output(Input(1),pos+1),Output(Input(2),pos+1))
 					,
 					OR(                                                                           //(10)
		    		 //either the attack was not performed
		    		 Output(Input(2), pos+2).emptyFile,
		    	               
		    	     ! Output(Input(2), pos+2).hasAlert       
		    	))
 			);//end-IMPLIES
		}//end-for
	}//end-for
 }
}//end-MR
}
 	
 	
 	
 	/*
   for (Action action : Input(1).actions()){                                                //(1)
 		var pos = action.getPosition();                                                     //(2) 
 		
 		for (var x = 0; x < action.parameters.size && action.containFormInput(); x++){      //(3)
 		
 			IMPLIES(
 				
 				notTried( action.user, Input(1).actions().get(pos).getUrl() ) &&            //(4)
 				EQUAL(Input(2), Input(1))&&                                                 //(5)
 				Input(2).actions().get(pos).setParameterValue( x, XMLInjectedFile() )       //(6)
 			                  
 				,
 				
 				OR(
		    		 isError(Output(Input(2), pos)),                                         //(7)                  
		    	     userCanRetrieveContent(action.getUser(), Output(Input(2),pos))        
		    	)
 			);
 		}
 	}
 	
  } }
 }*/