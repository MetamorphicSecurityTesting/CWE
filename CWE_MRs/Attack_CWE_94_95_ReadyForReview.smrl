import static smrl.mr.language.Operations.*;
import smrl.mr.language.Action;
import sun.security.util.Password

package smrl.mr.owasp {
 
/**
 * CWE Definition:
 * The software constructs all or part of a code segment using externally-influenced input 
 * from an upstream component, but it does not neutralize or incorrectly neutralizes special 
 * elements that could modify the syntax or behavior of the intended code segment.
 * 
 * Attack from: https://www.exploit-db.com/exploits/6606
 * 
 *** This is a particular case of the attack.
 * 
 * Comments:
 * (1) For loop iterate over all actions of the Input(1)
 * (2) Define a variable to store the position of the Input(1)'s action
 * (3) Define a URL address that trigger the vulnerability
 * (4) Checks that the user is authenticated i.e. doing an action that requires to be logged in.
 * (5) Create the follow-up input by copying the Input(1).
 * (6) Set the new URL for Input(2)
 * (7) The system should not allow action to be completed.
 * 
 * 
 */
 
MR CWE_95 { 
 { 	
 	
    for ( Action action : Input(1).actions() ) {                     //(1)
	  	var pos = action.getPosition();                              //(2)
	  	var current_url = Input(1).actions().get(pos).getUrl();      //(3)
	  	//** var new_url = "http://site.com/[yoxel_v1.23beta]/itpm/itpm_estimate.php?a=LOCAL_OR_REMOTE_FILE&rid=1&proj_id=);include($_GET[a]);die(2"
	  	// We need to define a.
	  
	  //FABRIZIO: it is not clear to me what you are trying to do in this case.
	  //The vulnerability is about code injection. In the example you report, they replace an assignment to a variable (proj_id) 
	  //with a set of instructions (i.e., ');include($_GET[a]);die(2') that in the specific case of this system lead to a vulnerability.
	  //Clearly, with the current implementation of MST we will never be able to deal with such cases. 
	  //HOwever, we may simply try to introduce commands that show a potential vulnerability. 
	  //For example, what if we replace the value of a variable with ');die('. The system is vulnerable if it provides a result that was never observed before (e.g., a broken page). 
	   
	   // Nazanin:
	   // CWE_95: I kept the new_url value exactly like the example from exploit-db because my problem is if we want to pass a value to eval() 
	   // we should know some information i.e. the name of the parameter that passes the value to eval command.
	   // in some cases, eval executes an echo command in some other it assigns a value to a parameter. 
	   // My point is we need some information from code to test the vulnerability.
	   // about passing the "die" command, it would be a case of code injection that covers the CWE_94 but it will not cover the "eval injection" as CWE_95
	   // This is my update for this implementation: I am implementing the code injection; CWE_94; and I need your comments to understand the points that I probably missed from CWE_95.
	   
	  // Question: how "SetParametervalue" works? do we have access to write a code to extract the parameter name of the EVAL command?
	  
	   var new_URL = current_url+";die(2)" // we can also inject 'phpinfo()' as command as well.
	   
	   
	   var go = notTried( action.getUser(), new_URL );
	   
	   
	   for ( var x =0; go && x < action.parameters.size; x++){
	   
	   var attackKey = ");die(2"; //Fabrizi: instead of ths, please itroduce another "generator" of sourc einput like the Random...
	   IMPLIES(
	   			//afterLogin(action)&&                                 //(4)
	   			EQUAL ( Input(2), Input(1) ) &&                      //(5)
	   			Input(2).actions().get(pos).setParameterValue( x, attackKey ) 	     //(6)	
	   			    			
		    ,  
		    
		    	AND(
		    		 isError(Output(Input(2), pos)),                       //(7)        How it detects an error page??
		    	     different ( Output(Input(1),pos),  Output(Input(2),pos)) //FABRIZIO: simply check that the context was already retrieved
		    	)
		    	
		    	
		);//end-IMPLIES
	}//end-for
 }
 } 
}//end-MR
}//end-package





