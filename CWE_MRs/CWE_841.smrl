import static smrl.mr.language.Operations.*;
import smrl.mr.language.actions.ResetSUTAction;

package smrl.mr.owasp{

/*
 * CWE Definition:
 * The software supports a session in which more than one behavior must be performed by an actor, 
 * but it does not properly ensure that the actor performs the behaviors in the required sequence.
 * 
 * Idea:
 * reverse the sequence of an action that requires to be authenticated before take it.
 * 
 *  E.g. if we signup, the email should be verified, and the steps are like the following:
 *  			signup -> email verification(enter the code) -> login -> authenticated action
 *  			signup -> login-> authenticated action NOTVALID
 * 
 *  		    Considering that we have a website that after signing up it redirect you to a page that asks you to enter a code, 
 *              which has been sent to your email account (email verification). 
 *              After that it will redirect you to login page.
 * 
 * 
 * Comments:
 * (1) The first loop iterates over all the actions to find a signup action.
 * (2) The second loop iterates over all the actions to find a login action performed after the signup.
 * (3) Verifies that the action y is a login.
 * (4) Creates the follow-up input with the sequence of actions after the login (action y).
 * (5) Makes sure that we start with a signup action
 * (6) Reset the actions for next iteration
 * (7) Verifies that the system gives two different outputs or will give an error by executing the follow-up input.
 * 
 * 
 */ 
MR CWE_841 {
		{
		 
			for ( var x = 0; x < Input(1).actions().size(); x++ ){                                                       //(1)
				for ( var y = x+2; isSignup(Input(1).actions().get(x)) && (y < Input(1).actions().size()); y++){         //(2)			
					
					IMPLIES (
						// x = signup
						// y = login 
						isLogin(Input(1).actions().get(y))&&                                                             //(3)
						
						EQUAL ( Input(2) , Input ( Input(1).actions().subList(y, Input(1).actions().size() ) ) )  &&     //(4)
						Input(2).addAction(0,Input(1).actions().get(x))   &&                                             //(5)  we start with a sign up
						Input(2).addAction(0, new ResetSUTAction())                                                      //(6)
						, 
					
						AND( different ( Output(Input(2),1),  Output(Input(1),y) )                                       //(7) 
						,
						isError(Output(Input(2),1)) 
						)
					); //end-IMPLIES
					
				} //end-for
			} //end-for
		}
	} //end-MR
} //end-package

























//	The problem is this case brings its own vulnerabilities e.g. the attacker injects the variable in URL that declares a user is verified or not.
